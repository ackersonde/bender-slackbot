name: Deploy bender slackbot

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      ca_pub_fingerprint:
        description: fingerprint of CA signed user cert
        required: false

jobs:
  build:
    runs-on: ubuntu-20.04
    env:
      CTX_DIGITALOCEAN_DROPLET_PROXY_TOKEN: ${{ secrets.CTX_DIGITALOCEAN_DROPLET_PROXY_TOKEN }}
      CTX_DIGITALOCEAN_FIREWALL: ${{ secrets.CTX_DIGITALOCEAN_FIREWALL }}
      CTX_SSH_DEPLOY_FINGERPRINT: ${{ secrets.CTX_SSH_DEPLOY_FINGERPRINT }}
      MY_CA: /root/my-ca
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.18'
      - name: Build application and docker image
        run: |
          go mod tidy
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build bender.go

          docker build --pull --no-cache -t danackerson/slackbot:vg$GITHUB_RUN_ID .
          docker login -u ${{ secrets.CTX_DOCKER_USER }} -p ${{ secrets.CTX_DOCKER_PASS }}
          docker tag danackerson/slackbot:vg$GITHUB_RUN_ID danackerson/slackbot:latest
          docker push --all-tags danackerson/slackbot

      - name: Deploy to DigitalOcean
        run: |
          git clone https://github.com/ackersonde/digitaloceans.git
          cd digitaloceans
          go get -t -d -v ./...
          go build do.go
          cd ../

          public_ip_address=$(curl -s https://checkip.amazonaws.com)
          ./digitaloceans/do -fn=firewallSSH -allow=true -ip=$public_ip_address -tag=traefik

          mkdir ~/.ssh
          cat <<EOF >~/.ssh/id_rsa
          ${{ secrets.CTX_DIGITALOCEAN_SSH_PRIVKEY }}
          EOF
          chmod 400 ~/.ssh/id_rsa

          ssh -o StrictHostKeyChecking=no root@ackerson.de "\
            mkdir $MY_CA || true && \
            echo "${{ secrets.CTX_SERVER_DEPLOY_SECRET_B64 }}" | base64 --decode > $MY_CA/id_ed25519 && \
            chmod 600 $MY_CA/id_ed25519 && \
            echo "${{ secrets.CTX_SERVER_DEPLOY_CACERT_B64 }}" | base64 --decode > $MY_CA/id_ed25519-cert.pub && \
            chmod 600 $MY_CA/id_ed25519-cert.pub && \
            docker login -u ${{ secrets.CTX_DOCKER_USER }} -p ${{ secrets.CTX_DOCKER_PASS }} && \
            docker rm -f bender || true && \
            docker run -d --restart=always \
              -e DARKSKY_API_KEY=${{ secrets.CTX_DARKSKY_API_KEY }} \
              -e GITHUB_RUN_ID=$GITHUB_RUN_ID \
              -e COOKIE_SECRET=${{ secrets.COOKIE_SECRET }} \
              -e CTX_JOIN_API_KEY=${{ secrets.CTX_JOIN_API_KEY }} \
              -e CTX_PLEX_TOKEN=${{ secrets.CTX_PLEX_TOKEN }} \
              -e CTX_HETZNER_API_TOKEN=${{ secrets.CTX_HETZNER_API_TOKEN }} \
              -e CTX_DIGITALOCEAN_DROPLET_PROXY_TOKEN=${{ secrets.CTX_DIGITALOCEAN_DROPLET_PROXY_TOKEN }} \
              -e CTX_DIGITALOCEAN_FIREWALL=${{ secrets.CTX_DIGITALOCEAN_FIREWALL }} \
              -e CTX_HETZNER_PROJECT=${{ secrets.CTX_HETZNER_PROJECT }} \
              -e CTX_HETZNER_FIREWALL=${{ secrets.CTX_HETZNER_FIREWALL }} \
              -e CTX_JOIN_API_KEY=${{ secrets.CTX_JOIN_API_KEY }} \
              -e CTX_DROPBOX_ACCESS_TOKEN=${{ secrets.CTX_DROPBOX_ACCESS_TOKEN }} \
              -e CTX_ETHERSCAN_API_KEY=${{ secrets.CTX_ETHERSCAN_API_KEY }} \
              -e CTX_ETHEREUM_ADDRESS_METAMASK=${{ secrets.CTX_ETHEREUM_ADDRESS_METAMASK }} \
              -e CTX_CURRENT_PGP_FINGERPRINT=${{ secrets.CTX_CURRENT_PGP_FINGERPRINT }} \
              -e CTX_STELLAR_LUMENS_ADDRESS=${{ secrets.CTX_STELLAR_LUMENS_ADDRESS }} \
              -e CTX_VPNC_GATEWAY=${{ secrets.CTX_VPNC_GATEWAY }} \
              -e CTX_SLACK_CHANNEL=${{ secrets.CTX_SLACK_CHANNEL }} \
              -e CTX_SLACK_NEW_API_TOKEN=${{ secrets.CTX_SLACK_NEW_API_TOKEN }} \
              -e SLACK_EVENTSAPI_ENDPOINT=${{ secrets.SLACK_EVENTSAPI_ENDPOINT }} \
              -e SLACK_VERIFICATION_TOKEN=${{ secrets.SLACK_VERIFICATION_TOKEN }} \
              -e SLACK_SIGNING_SECRET=${{ secrets.SLACK_SIGNING_SECRET }} \
              -e SLACK_BENDER_BOT_USERID=${{ secrets.SLACK_BENDER_BOT_USERID }} \
              -e ACKDE_HOST_SSH_KEY_PUB_B64=${{ secrets.CTX_ACKDE_HOST_SSH_KEY_PUB_B64 }} \
              -e MASTER_HOSTNAME=${{ secrets.CTX_IPV6_MASTER_HOME }} \
              -e SLAVE_HOSTNAME=${{ secrets.CTX_IPV6_SLAVE_HOME }} \
              -e BUILD_HOSTNAME=${{ secrets.CTX_IPV6_BUILD_HOME }} \
              -e VAULT_ADDR=${{ secrets.VAULT_ADDR }} \
              -e VAULT_APPROLE_SECRET_ID=${{ secrets.VAULT_APPROLE_SECRET_ID }} \
              -e VAULT_APPROLE_ROLE_ID=${{ secrets.VAULT_APPROLE_ROLE_ID }} \
              -v $MY_CA/id_ed25519:/root/.ssh/id_ed25519:ro \
              -v $MY_CA/id_ed25519-cert.pub:/root/.ssh/id_ed25519-cert.pub:ro \
              -v /root/syncthing/2086h-4d0t2:/app/sync \
              --label='traefik.enable=true' \
              --label='traefik.http.routers.bender.middlewares=secHeaders@file' \
              --label='traefik.http.routers.bender.tls.certResolver=letsencrypt' \
              --label='traefik.http.routers.bender.tls.domains=${{ secrets.BENDER_HOSTNAME }}' \
              --label='traefik.http.routers.bender.rule=Host(\`${{ secrets.BENDER_HOSTNAME }}\`)' \
              --name bender danackerson/slackbot:vg$GITHUB_RUN_ID"

          rm -Rf ~/.ssh/id_rsa ~/.docker/config.json
          ./digitaloceans/do -fn=firewallSSH -allow=false -ip=$public_ip_address

          curl -s -o /dev/null -X POST -d token=${{ secrets.CTX_SLACK_NOTIFICATIONS_TOKEN }} -d channel=C092UE0H4 \
            -d text="<https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID | $GITHUB_REPOSITORY @ $GITHUB_RUN_ID>" \
            https://slack.com/api/chat.postMessage

