name: Deploy bender slackbot

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      ca_pub_fingerprint:
        description: fingerprint of CA signed user cert
        required: false

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
      - name: Build application and docker image
        run: |
          go get -t -d -v ./...
          env GOOS=linux GOARCH=arm GOARM=7 go build bender.go

          docker run --rm --privileged multiarch/qemu-user-static:register
          docker build --compress -t danackerson/slackbot:vg$GITHUB_RUN_ID .

          docker login -u ${{ secrets.CTX_DOCKER_USER }} -p ${{ secrets.CTX_DOCKER_PASS }}
          docker tag danackerson/slackbot:vg$GITHUB_RUN_ID danackerson/slackbot:latest
          docker push danackerson/slackbot:vg$GITHUB_RUN_ID
          docker push danackerson/slackbot:latest

      - name: Prepare K8S bundle config
        run: |
          export GITHUB_RUN_ID_B64=`echo -n $GITHUB_RUN_ID | base64`
          sed -i -e "s@{{GITHUB_RUN_ID_B64}}@$GITHUB_RUN_ID_B64@" bender.yml
          sed -i -e "s@{{GITHUB_RUN_ID}}@$GITHUB_RUN_ID@" bender.yml

          export CTX_SLACK_CHANNEL_B64=`echo -n ${{ secrets.CTX_SLACK_CHANNEL }} | base64`
          sed -i -e "s@{{CTX_SLACK_CHANNEL_B64}}@$CTX_SLACK_CHANNEL_B64@" bender.yml

          echo -n "${{ secrets.CTX_PLEX_TOKEN }}" | base64 | tr -d \\n > .base64_enc
          export CTX_PLEX_TOKEN_B64=`cat .base64_enc`
          sed -i -e "s@{{CTX_PLEX_TOKEN_B64}}@$CTX_PLEX_TOKEN_B64@" bender.yml
          sed -i -e "s@{{CTX_PLEX_TOKEN}}@${{ secrets.CTX_PLEX_TOKEN }}@" finished_torrent.sh

          echo -n "${{ secrets.CTX_DIGITALOCEAN_TOKEN }}" | base64 | tr -d \\n > .base64_enc
          export CTX_DIGITALOCEAN_TOKEN_B64=`cat .base64_enc`
          sed -i -e "s@{{CTX_DIGITALOCEAN_TOKEN_B64}}@$CTX_DIGITALOCEAN_TOKEN_B64@" bender.yml

          echo -n "${{ secrets.CTX_STELLAR_LUMENS_ADDRESS }}" | base64 | tr -d \\n > .base64_enc
          export CTX_STELLAR_LUMENS_ADDRESS_B64=`cat .base64_enc`
          sed -i -e "s@{{CTX_STELLAR_LUMENS_ADDRESS_B64}}@$CTX_STELLAR_LUMENS_ADDRESS_B64@" bender.yml

          echo -n "${{ secrets.CTX_CURRENT_PGP_FINGERPRINT }}" | base64 | tr -d \\n > .base64_enc
          export CTX_CURRENT_PGP_FINGERPRINT_B64=`cat .base64_enc`
          sed -i -e "s@{{CTX_CURRENT_PGP_FINGERPRINT_B64}}@$CTX_CURRENT_PGP_FINGERPRINT_B64@" bender.yml

          echo -n "${{ secrets.CTX_ETHEREUM_ADDRESS_METAMASK }}" | base64 | tr -d \\n > .base64_enc
          export CTX_ETHEREUM_ADDRESS_METAMASK_B64=`cat .base64_enc`
          sed -i -e "s@{{CTX_ETHEREUM_ADDRESS_METAMASK_B64}}@$CTX_ETHEREUM_ADDRESS_METAMASK_B64@" bender.yml

          echo -n "${{ secrets.CTX_ETHERSCAN_API_KEY }}" | base64 | tr -d \\n > .base64_enc
          export CTX_ETHERSCAN_API_KEY_B64=`cat .base64_enc`
          sed -i -e "s@{{CTX_ETHERSCAN_API_KEY_B64}}@$CTX_ETHERSCAN_API_KEY_B64@" bender.yml

          echo -n "${{ secrets.CTX_SLACK_NEW_API_TOKEN }}" | base64 | tr -d \\n > .base64_enc
          export CTX_SLACK_NEW_API_TOKEN_B64=`cat .base64_enc`
          sed -i -e "s@{{CTX_SLACK_NEW_API_TOKEN_B64}}@$CTX_SLACK_NEW_API_TOKEN_B64@" bender.yml

          echo -n "${{ secrets.SLACK_EVENTSAPI_ENDPOINT }}" | base64 | tr -d \\n > .base64_enc
          export SLACK_EVENTSAPI_ENDPOINT_B64=`cat .base64_enc`
          sed -i -e "s@{{SLACK_EVENTSAPI_ENDPOINT_B64}}@$SLACK_EVENTSAPI_ENDPOINT_B64@" bender.yml

          echo -n "${{ secrets.SLACK_VERIFICATION_TOKEN }}" | base64 | tr -d \\n > .base64_enc
          export SLACK_VERIFICATION_TOKEN_B64=`cat .base64_enc`
          sed -i -e "s@{{SLACK_VERIFICATION_TOKEN_B64}}@$SLACK_VERIFICATION_TOKEN_B64@" bender.yml

          echo -n "${{ secrets.SLACK_SIGNING_SECRET }}" | base64 | tr -d \\n > .base64_enc
          export SLACK_SIGNING_SECRET_B64=`cat .base64_enc`
          sed -i -e "s@{{SLACK_SIGNING_SECRET_B64}}@$SLACK_SIGNING_SECRET_B64@" bender.yml

          echo -n "${{ secrets.SLACK_BENDER_BOT_USERID }}" | base64 | tr -d \\n > .base64_enc
          export SLACK_BENDER_BOT_USERID_B64=`cat .base64_enc`
          sed -i -e "s@{{SLACK_BENDER_BOT_USERID_B64}}@$SLACK_BENDER_BOT_USERID_B64@" bender.yml

          echo -n "${{ secrets.CTX_JOIN_API_KEY }}" | base64 | tr -d \\n > .base64_enc
          export CTX_JOIN_API_KEY_B64=`cat .base64_enc`
          sed -i -e "s@{{CTX_JOIN_API_KEY_B64}}@$CTX_JOIN_API_KEY_B64@" bender.yml

          echo -n "${{ secrets.CTX_VPNC_GATEWAY }}" | base64 | tr -d \\n > .base64_enc
          export CTX_VPNC_GATEWAY_B64=`cat .base64_enc`
          sed -i -e "s@{{CTX_VPNC_GATEWAY_B64}}@$CTX_VPNC_GATEWAY_B64@" bender.yml

          echo -n "${{ secrets.CTX_DROPBOX_ACCESS_TOKEN }}" | base64 | tr -d \\n > .base64_enc
          export CTX_DROPBOX_ACCESS_TOKEN_B64=`cat .base64_enc`

          echo -n "${{ secrets.FRITZ_BOX_HOST }}" | base64 | tr -d \\n > .base64_enc
          export FRITZ_BOX_HOST_B64=`cat .base64_enc`

          echo -n "${{ secrets.FRITZ_BOX_USER }}" | base64 | tr -d \\n > .base64_enc
          export FRITZ_BOX_USER_B64=`cat .base64_enc`

          echo -n "${{ secrets.FRITZ_BOX_PASS }}" | base64 | tr -d \\n > .base64_enc
          export FRITZ_BOX_PASS_B64=`cat .base64_enc`
          rm .base64_enc

          sed -i -e "s@{{CTX_DROPBOX_ACCESS_TOKEN_B64}}@$CTX_DROPBOX_ACCESS_TOKEN_B64@" bender.yml

          sed -i -e "s@{{CTX_SERVER_DEPLOY_SECRET_B64}}@${{ secrets.CTX_SERVER_DEPLOY_SECRET_B64 }}@" bender.yml

          sed -i -e "s@{{CTX_SERVER_DEPLOY_CACERT_B64}}@${{ secrets.CTX_SERVER_DEPLOY_CACERT_B64 }}@" bender.yml

          sed -i -e "s@{{CTX_POPS4XL_SCP_KEY_SECRET_B64}}@${{ secrets.CTX_POPS4XL_SCP_KEY_SECRET_B64 }}@" bender.yml

          sed -i -e "s@{{BENDER_HOSTNAME}}@${{ secrets.BENDER_HOSTNAME }}@g" bender.yml

          sed -i -e "s@{{FRITZ_BOX_HOST_B64}}@$FRITZ_BOX_HOST_B64@" bender.yml

          sed -i -e "s@{{FRITZ_BOX_USER_B64}}@$FRITZ_BOX_USER_B64@" bender.yml

          sed -i -e "s@{{FRITZ_BOX_PASS_B64}}@$FRITZ_BOX_PASS_B64@" bender.yml


      - name: Create wireguard tunnel configuration
        run: |
          sudo apt-get install wireguard resolvconf
          echo "${{ secrets.CTX_WIREGUARD_GITHUB_ACTIONS_CLIENT_CONFIG }}" | sudo tee /etc/wireguard/tunnel.conf

      - name: Prepare ssh key for remote login
        run: |
          mkdir ~/.ssh/
          echo "${{ secrets.CTX_SERVER_DEPLOY_SECRET_B64 }}" | base64 -d > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          echo "${{ secrets.CTX_SERVER_DEPLOY_CACERT_B64 }}" | base64 -d > ~/.ssh/id_ed25519-cert.pub

      - name: Deploy to K8S
        env:
          SSH_CXN: ${{ secrets.CTX_K8S_SSH_USER }}@${{ secrets.CTX_K8S_SSH_HOST }}
        run: |
          ssh-keygen -L -f ~/.ssh/id_ed25519-cert.pub
          wg-quick up tunnel

          scp -o StrictHostKeyChecking=no bender.yml $SSH_CXN:~/k3s/
          # TODO: `k delete -f k3s/bender.yaml` forces SECRETS update
          ssh $SSH_CXN -- "sudo kubectl apply -f k3s/bender.yml"

          wg-quick down tunnel

          rm -Rf ~/.ssh

          curl -s -o /dev/null -X POST -d token=${{ secrets.CTX_SLACK_NOTIFICATIONS_TOKEN }} -d channel=C092UE0H4 \
            -d text="<https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID | $GITHUB_REPOSITORY @ $GITHUB_RUN_ID>" \
            https://slack.com/api/chat.postMessage
