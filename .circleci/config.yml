version: 2.1

orbs:
  ipsec: danackerson/ipsec@1.1.0

jobs:
  build:
    docker:
      - image: golang:alpine
    working_directory: /go/src/github.com/danackerson/bender-slackbot
    steps:
      - checkout
      - setup_remote_docker:
          version: 18.09.3
      - run:
          name: "Build & push docker image"
          command: |
            apk add -U curl build-base git libc6-compat docker-cli

            go get -t -d -v ./...
            env GOOS=linux GOARCH=arm GOARM=7 go build bender.go

            docker run --rm --privileged multiarch/qemu-user-static:register
            docker build --compress -t danackerson/slackbot:vc$CIRCLE_BUILD_NUM .

            docker login -u $CTX_DOCKER_USER -p $CTX_DOCKER_PASS
            docker tag danackerson/slackbot:vc$CIRCLE_BUILD_NUM danackerson/slackbot:latest
            docker push danackerson/slackbot:vc$CIRCLE_BUILD_NUM
            docker push danackerson/slackbot:latest
      - run:
          name: "Prepare K8S YAML config"
          command: |
            export CIRCLE_BUILD_NUM_B64=`echo -n $CIRCLE_BUILD_NUM | base64`
            sed -i -e "s@{{CIRCLE_BUILD_NUM_B64}}@$CIRCLE_BUILD_NUM_B64@" bender.yml
            sed -i -e "s@{{CIRCLE_BUILD_NUM}}@$CIRCLE_BUILD_NUM@" bender.yml

            export homeDomain_B64=`echo -n $homeDomain | base64`
            sed -i -e "s@{{homeDomain_B64}}@$homeDomain_B64@" bender.yml

            export slackReportChannel_B64=`echo -n $slackReportChannel | base64`
            sed -i -e "s@{{slackReportChannel_B64}}@$slackReportChannel_B64@" bender.yml

            echo -n "$PLEX_TOKEN" | base64 | tr -d \\n > .base64_enc
            export PLEX_TOKEN_B64=`cat .base64_enc`
            sed -i -e "s@{{PLEX_TOKEN_B64}}@$PLEX_TOKEN_B64@" bender.yml

            echo -n "$CTX_CIRCLECI_API_TOKEN" | base64 | tr -d \\n > .base64_enc
            export CTX_CIRCLECI_API_TOKEN_B64=`cat .base64_enc`
            sed -i -e "s@{{CTX_CIRCLECI_API_TOKEN_B64}}@$CTX_CIRCLECI_API_TOKEN_B64@" bender.yml

            echo -n "$CTX_DIGITALOCEAN_TOKEN" | base64 | tr -d \\n > .base64_enc
            export CTX_DIGITALOCEAN_TOKEN_B64=`cat .base64_enc`
            sed -i -e "s@{{CTX_DIGITALOCEAN_TOKEN_B64}}@$CTX_DIGITALOCEAN_TOKEN_B64@" bender.yml

            echo -n "$CTX_SLACK_API_TOKEN" | base64 | tr -d \\n > .base64_enc
            export CTX_SLACK_API_TOKEN_B64=`cat .base64_enc`
            sed -i -e "s@{{CTX_SLACK_API_TOKEN_B64}}@$CTX_SLACK_API_TOKEN_B64@" bender.yml

            echo -n "$CTX_JOIN_API_KEY" | base64 | tr -d \\n > .base64_enc
            export CTX_JOIN_API_KEY_B64=`cat .base64_enc`
            sed -i -e "s@{{CTX_JOIN_API_KEY_B64}}@$CTX_JOIN_API_KEY_B64@" bender.yml

            export CTX_VPNC_GATEWAY_B64=`echo -n $CTX_VPNC_GATEWAY | base64`
            sed -i -e "s@{{CTX_VPNC_GATEWAY_B64}}@$CTX_VPNC_GATEWAY_B64@" bender.yml

            echo -n "$CTX_DROPBOX_ACCESS_TOKEN" | base64 | tr -d \\n > .base64_enc
            export CTX_DROPBOX_ACCESS_TOKEN_B64=`cat .base64_enc`
            sed -i -e "s@{{CTX_DROPBOX_ACCESS_TOKEN_B64}}@$CTX_DROPBOX_ACCESS_TOKEN_B64@" bender.yml

            sed -i -e "s@{{CTX_SERVER_DEPLOY_SECRET}}@$CTX_SERVER_DEPLOY_SECRET@" bender.yml

            rm .base64_enc
      - persist_to_workspace:
          root: /go/src/github.com/danackerson/bender-slackbot
          paths:
            - bender.yml

commands:
  prepare_deploy_script:
    steps:
      - attach_workspace:
          at: /tmp
      - run:
          name: "Prepare deploy script"
          command: |
            cat \<<EOF >/tmp/deploy_script.sh
            scp -o StrictHostKeyChecking=no /tmp/bender.yml $SSH_USER@$SSH_HOST:~/k3s/
            ssh $SSH_USER@$SSH_HOST -- "sudo kubectl apply -f k3s/bender.yml"
            EOF

            chmod u+x /tmp/deploy_script.sh
      - persist_to_workspace:
          root: /tmp
          paths:
            - bender.yml
            - deploy_script.sh


workflows:
  build-deploy:
    jobs:
        - build:
            context: org-global
        - ipsec/remote-deploy:
            context: org-global
            requires:
              - build
            pre-steps:
              - prepare_deploy_script
